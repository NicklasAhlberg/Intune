<#	
	.NOTES
	===========================================================================
	 Created on:   	2023-06-15
	 Created by:   	Nicklas Ahlberg
	 Organization: 	rockenroll.tech
	 Filename:     	Remediation.ps1
	 Updated on:   	2023-06-15
	 Version:       1.0.0.1
	===========================================================================
	.DESCRIPTION
		Use this script as part of mitigating CVE-2023-32019
	.WARRANTY
		The script is provided "AS IS" with no warranties
#>

# https://support.microsoft.com/en-us/topic/kb5028407-how-to-manage-the-vulnerability-associated-with-cve-2023-32019-bd6ed35f-48b1-41f6-bd19-d2d97270f080

# Get OS version. Determine build and revision version
$currentMajorVersionNumber = (Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion").CurrentMajorVersionNumber
$currentMinorVersionNumber = (Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion").CurrentMinorVersionNumber
$currentBuildNumber = (Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion").CurrentBuildNumber
$updateBuildRevision = (Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion").ubr

[Version]$currentOSversion = "$currentMajorVersionNumber.$currentMinorVersionNumber.$currentBuildNumber.$updateBuildRevision"


function Check-Registry {
    param (
        [Parameter (Mandatory = $false)] [String]$regValue
    )
    $regHive = "HKLM:\SYSTEM\CurrentControlSet\Policies\Microsoft\FeatureManagement\Overrides"

    # Create both reg key and value if the key doesn't exist
    if (!(Test-Path $regHive)) {
        New-Item -Path $regHive -Force -Confirm:$false
        New-ItemProperty -Path $regHive -Name $regValue -Value '1' -PropertyType Dword -Force | Out-Null
        Write-Output "$regValue reg value has been created."    
    }
    
    # Create reg value if the key already exists
    else {
        New-ItemProperty -Path $regHive -Name $regValue -Value '1' -PropertyType Dword -Force | Out-Null
    }
    
}

# If Windows 11 22H2 (build 22621)
if ($currentOSversion.Build -eq '22621') {
    Write-Output "Running Windows 11-22H2"
    if ($currentOSversion.Revision -ge '1848') {
        Check-Registry -regValue "4237806220"
    }
}

# If Windows 11 21H2 (build 22000)
if ($currentOSversion.Build -eq '22000') {
    Write-Output "Running Windows 11-21H2"
    if ($currentOSversion.Revision -ge '2057') {
        Check-Registry -regValue "4204251788"
    }
}

# If Windows 10 20H2, 21H2, 22H2 (build 19042, 19044, 19045)
if ($currentOSversion.Build -eq '19042') {
    Write-Output "Running Windows 10-20H2"
    if ($currentOSversion.Revision -ge '2965') {
        Check-Registry -regValue "4103588492"
    }
}

if ($currentOSversion.Build -eq '19044') {
    Write-Output "Running Windows 10-21H2"
    if ($currentOSversion.Revision -ge '3086') {
        Check-Registry -regValue "4103588492"
    }
}

if ($currentOSversion.Build -eq '19045') {
    Write-Output "Running Windows 10-22H2"
    if ($currentOSversion.Revision -ge '3086') {
        Check-Registry -regValue "4103588492"
    }
}